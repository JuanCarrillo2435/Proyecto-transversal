/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Data.AlumnoData;
import Data.InscripcionData;
import Data.MateriaData;
import Entidades.Alumno;
import Entidades.Inscripcion;
import Entidades.Materia;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class Notas extends javax.swing.JInternalFrame {

    private List<Materia> listaMateria;
    private List<Alumno> listaAlumno;
    private List<Inscripcion> listaInscripcion;

    private InscripcionData inscData;
    private MateriaData matData;
    private AlumnoData aluData;

    private DefaultTableModel modelo;
    private Inscripcion insc = null;
    private Materia mat = null;
    InscripcionData notaActual;
    private Alumno alu;
    public Notas() {
        initComponents();
        aluData = new AlumnoData();
        listaAlumno = aluData.listarAlumnos();
        modelo = new DefaultTableModel(){
            
            @Override
            public boolean isCellEditable(int f, int c) {
                if(c==2){
                    return true;
                }
                return false; //To change body of generated methods, choose Tools | Templates.
            }

        };
        insc = new Inscripcion();
        inscData = new InscripcionData();
        matData = new MateriaData();
        notaActual = new InscripcionData();
        
        cargaAlumnos();
        armarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCseleccionarAlum = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTMateria = new javax.swing.JTable();
        jBguardar = new javax.swing.JButton();
        jBsalir = new javax.swing.JButton();

        jLabel1.setText("Carga de notas");

        jLabel2.setText("Seleccione un alumno");

        jCseleccionarAlum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCseleccionarAlumActionPerformed(evt);
            }
        });

        jTMateria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTMateria);

        jBguardar.setText("Guardar");
        jBguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBguardarActionPerformed(evt);
            }
        });

        jBsalir.setText("Salir");
        jBsalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBsalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(38, 38, 38)
                                .addComponent(jCseleccionarAlum, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(72, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jBguardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBsalir)
                .addGap(143, 143, 143))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCseleccionarAlum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBguardar)
                    .addComponent(jBsalir))
                .addContainerGap(165, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBsalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBsalirActionPerformed
        // TODO add your handling code here:
        int confirmar = JOptionPane.showConfirmDialog(null, "¿Estás seguro de que deseas cerrar este proyecto?", "Confirmar Cierre", JOptionPane.YES_NO_OPTION);
        if (confirmar == JOptionPane.YES_OPTION) {
            dispose(); // Cierra la ventana actual (proyecto)
        }

    }//GEN-LAST:event_jBsalirActionPerformed

    private void jCseleccionarAlumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCseleccionarAlumActionPerformed
        // TODO add your handling code here:
      borrarFila();
//        cargarNotaXAlumno();
    Alumno elegido = (Alumno) jCseleccionarAlum.getSelectedItem();
    listaInscripcion = inscData.obtenerInscripcionesPorAlumno(elegido.getIdAlumno());
    if(listaInscripcion.size()>0){
        for(Inscripcion insc : listaInscripcion){
           modelo.addRow(new Object[]{
               insc.getMateria().getIdMateria(),
               insc.getMateria().getNombre(),
               insc.getNota()
           });
        }
    }

    }//GEN-LAST:event_jCseleccionarAlumActionPerformed

    private void jBguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBguardarActionPerformed

        int filasSelecc = jTMateria.getSelectedRow();
        if (filasSelecc != -1) {
            Alumno a = (Alumno) jCseleccionarAlum.getSelectedItem();
            int idMat = (Integer) modelo.getValueAt(filasSelecc, 0);
            double nota = Double.parseDouble((String) modelo.getValueAt(filasSelecc, 2));
            inscData.actualizarNota(a.getIdAlumno(), idMat, nota);
            borrarFila();
        }else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar la materia para actualizar la nota");
        }
        

    }//GEN-LAST:event_jBguardarActionPerformed

    private void cargaAlumnos() {
        for (Alumno item : listaAlumno) {
            jCseleccionarAlum.addItem(item); // Agrega el objeto Alumno al modelo
        }
    }

    private void armarTabla() {
        modelo.addColumn("Codigo");
        modelo.addColumn("Nombre");
        modelo.addColumn("Nota");
        jTMateria.setModel(modelo);
    }

    private void borrarFila() {
        int ind = modelo.getRowCount() - 1;
        for (int i = ind; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBguardar;
    private javax.swing.JButton jBsalir;
    private javax.swing.JComboBox<Alumno> jCseleccionarAlum;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTMateria;
    // End of variables declaration//GEN-END:variables
}
